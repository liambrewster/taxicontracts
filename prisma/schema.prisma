generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    operatorId    String?
    role          Role       @default(USER)
    accounts      Account[]
    contracts     Contract[]
    sessions      Session[]
    operator      Operator?  @relation(fields: [operatorId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Operator {
    id           String     @id @default(cuid())
    inviteCode   String     @default(cuid())
    name         String     @unique
    logo         String?
    website      String?
    public_email String?
    public_phone String?
    plan         OpPlan     @default(BASIC)
    contracts    Contract[]
    users        User[]
}

model Contract {
    id          String      @id @default(cuid())
    internalId  String
    operatorId  String
    userId      String
    status      Status      @default(ACTIVE)
    pickup      String
    destination String
    collections Int
    distance    Int
    vehicleSize Int         @default(4)
    timings     String
    days        String
    journeytype JourneyType @default(REGULAR)
    submitted   DateTime    @default(now())
    expiry      DateTime
    bids        Bid[]
    operator    Operator    @relation(fields: [operatorId], references: [id])
    user        User        @relation(fields: [userId], references: [id])
}

model Bid {
    id                 String   @id @default(cuid())
    contractId         String
    submitted          DateTime @default(now())
    firstName          String
    lastName           String
    email              String
    mobile             String
    address1           String
    town               String
    postcode           String
    vehicle            String
    licensingAuthority String
    bidAmount          Int
    winningBid         Boolean?
    contract           Contract @relation(fields: [contractId], references: [id])

    @@unique([contractId, email])
}

enum OpPlan {
    BASIC
    STANDARD
    PREMIUM
}

enum Role {
    USER
    MANAGER
    ADMIN
    SUPERADMIN
}

enum Status {
    DRAFT
    PENDING
    ACTIVE
    INREVIEW
    CLOSED
    COMPLETE
    DELETED
}

enum JourneyType {
    REGULAR
    SINGLE
    RETURN
}
